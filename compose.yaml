services:
  # backend-service
  spring-boot-observability:
    build:
      context: . # Use the current directory as the build context
      dockerfile: Dockerfile # Specify the Dockerfile to use
    container_name: spring-boot-observability-container
    restart: always
    ports:
      - "8080:8080" # Expose Spring Boot on port 8080
    depends_on:
      - jaeger
      - loki
      - prometheus
    networks:
      - app_network

  # Prometheus Service
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network

  ## Tempo Service
  #tempo:
  #  image: grafana/tempo
  #  container_name: tempo
  #  command: [ "-config.file=/etc/tempo.yaml" ]
  #  volumes:
  #    - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
  #    - ./docker/tempo/tempo-data:/tmp/tempo
  #  ports:
  #    - "3200:3200" # Tempo
  #    - "9411:9411" # zipkin
  #  networks:
  #    - app_network

  jaeger:
    image: jaegertracing/jaeger:2.9.0
    ports:
      - "16686:16686" # UI
      - "14268:14268" # HTTP collector
      - "14250:14250" # gRPC collector
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "9411:9411"   # Zipkin HTTP
    networks:
      - app_network

  #loki Service
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - app_network

  # Grafana Service
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=yu71
      - GF_SECURITY_ADMIN_PASSWORD=53cret
    networks:
      - app_network

networks:
  app_network: # Custom network for container communication
    driver: bridge